# DOCKERFILE.rls for BRANE
#   by Tim MÃ¼ller and Onno Valkering
#
# Contains the Dockerfile for the various Brane instance images.
#
# This version builds the release images. For images build in development mode,
# check Dockerfile.dev.
#


##### BUILD STAGE #####
### This file will act as the bottom for both builder images
FROM rust:1 AS build-brane
LABEL org.opencontainers.image.source=https://github.com/BraneFramework/brane

# Define some build args
ARG USERID=1000
ARG GROUPID=1000

# Setup a user mirroring the main one
RUN addgroup --gid $GROUPID brane
RUN adduser --uid $USERID --gid $GROUPID --gecos "Brane" --disabled-password brane

# Install build dependencies (that are not in the rust image already)
RUN apt-get update && apt-get install -y \
    cmake \
    curl \
    unzip \
 && rm -rf /var/lib/apt/lists/*

# Copy over relevant crates & other files
RUN mkdir /build && chown -R brane:brane /build
COPY --chown=brane:brane . /build

# Build optimized binaries
USER brane
WORKDIR /build
RUN --mount=type=cache,id=cargoidx,uid=$USERID,target=/usr/local/cargo/registry \
    --mount=type=cache,id=branecache,uid=$USERID,target=/build/target \
    cargo build \
        --release \
        --package brane-api \
        --package brane-chk \
        --package brane-drv \
        --package brane-job \
        --package brane-prx \
        --package brane-plr \
        --package brane-reg \
    && cp ./target/release/brane-api /home/brane/brane-api \
    && cp ./target/release/brane-chk /home/brane/brane-chk \
    && cp ./target/release/brane-drv /home/brane/brane-drv \
    && cp ./target/release/brane-job /home/brane/brane-job \
    && cp ./target/release/brane-prx /home/brane/brane-prx \
    && cp ./target/release/brane-plr /home/brane/brane-plr \
    && cp ./target/release/brane-reg /home/brane/brane-reg

# If ever run, run a shell
WORKDIR /
ENTRYPOINT [ "/bin/bash" ]



### This target does the eflint-repl binary
FROM haskell:9.2.8 AS build-eflint-repl

# Define build args
ARG USERID=1000
ARG GROUPID=1000
ARG EFLINT_COMMIT=87d2be70c400b6f252fa28b51a4b5afbc947117c

# Setup a user mirroring the main one
RUN addgroup --gid $GROUPID brane
RUN adduser --uid $USERID --gid $GROUPID --gecos "Brane" --disabled-password brane

# Add a haskell GHC alias for 9.2
RUN ln -s /opt/ghc/9.2.8/bin/ghc /opt/ghc/9.2.8/bin/ghc-9.2

# Fetch the repo & compile it
# NOTE: The `rm -f ~/.cabal/packages/hackage.haskell.org/*.json` exists to remove old keys
#       See: <https://github.com/haskell/hackage-server/issues/547#issuecomment-251212946>
USER brane
ADD --chown=brane:brane https://gitlab.com/eflint/haskell-implementation/-/archive/$EFLINT_COMMIT/haskell-implementation-$EFLINT_COMMIT.zip /home/brane/haskell-implementation.zip
RUN cd /home/brane \
 && rm -f ~/.cabal/packages/hackage.haskell.org/*.json \
 && unzip haskell-implementation.zip \
 && cd haskell-implementation-$EFLINT_COMMIT \
 && cabal update \
 && cabal install eflint-repl





##### BASE IMAGE #####
# This image defines the base image for all Brane service images.
FROM ubuntu:22.04 AS brane-base
LABEL org.opencontainers.image.source=https://github.com/BraneFramework/brane

# Define some build args
ARG USERID=1000
ARG GROUPID=1000

# Setup a user mirroring the main one
RUN addgroup --gid $GROUPID brane
RUN adduser --uid $USERID --gid $GROUPID --gecos "Brane" --disabled-password brane

# Add the log directory
RUN mkdir -p /logs/profile && chown -R brane:brane /logs/profile
USER brane

# # Add an ubuntu 21.10 source for libssl1.1 (insecure, but it's the dev image anyway)
# # Can't get around that, even in release, since libssl1.1 is only available in old repos
# RUN echo "deb http://old-releases.ubuntu.com/ubuntu impish-security main" >> /etc/apt/sources.list

# # Install libssl (the Rust crate depends on it)
# RUN apt-get update && apt-get install -y \
#     libssl1.1 \
#  && rm -rf /var/lib/apt/lists/*

# If ever run, run a shell
ENTRYPOINT [ "/bin/bash" ]





##### BRANE-PRX #####
# This image contains the Brane proxy service.
FROM brane-base AS brane-prx

# Copy `brane-prx` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane//brane-prx /brane-prx

# Run the compiled executable as base
ENTRYPOINT [ "/brane-prx" ]





##### BRANE-API #####
# This image contains the Brane API service.
FROM brane-base AS brane-api

# Install additional runtime dependencies specific for brane-api
USER root
RUN apt-get update && apt-get install -y \
    gnupg2 \
    wget \
 && rm -rf /var/lib/apt/lists/*

# Copy `brane-api` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-api /brane-api

# Run the compiled executable as base
USER brane
ENTRYPOINT [ "/brane-api" ]





##### BRANE-DRV #####
# This image contains the Brane driver service.
FROM brane-base AS brane-drv

# Copy `brane-drv` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-drv /brane-drv

# Run the compiled executable as base
ENTRYPOINT [ "/brane-drv" ]





##### BRANE-PLR #####
# This image contains the Brane planner service.
FROM brane-base AS brane-plr

# Copy `brane-plr` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-plr /brane-plr

# Run the compiled executable as base
ENTRYPOINT [ "/brane-plr" ]





##### BRANE-JOB #####
# This image contains the Brane job service.
FROM brane-base AS brane-job

# ARG SOCK_GROUPID=1000

# Add the brane user to the group we need to access the Docker socket
# Very unfortunate, this. Don't know how else to mount the socket as non-root :/
USER root
RUN adduser brane root

# Copy `brane-job` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-job /brane-job

# Run the compiled executable as base
# USER brane
ENTRYPOINT [ "/brane-job" ]





##### BRANE-REG #####
# This image contains the Brane registry service.
FROM brane-base AS brane-reg

# Copy `brane-reg` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-reg /brane-reg

# Run the compiled executable as base
ENTRYPOINT [ "/brane-reg" ]





##### BRANE-CHK #####
# This image contains the policy reasoner / checker!
FROM brane-base AS brane-chk

# Define build args
ENV POLICY_FILE="./main.eflint"

# Install more deps
USER root
RUN apt-get update && apt-get install -y \
    sqlite3 \
 && rm -rf /var/lib/apt/lists/*

# Copy `policy-reasoner` from build stage
COPY --from=build-brane --chown=brane:brane /home/brane/brane-chk /brane-chk
RUN chmod +x /brane-chk

# Copy `eflint-repl` from build stage
COPY --from=build-eflint-repl --chown=brane:brane /home/brane/.cabal/bin/eflint-repl /home/brane/eflint-repl

# Copy the base policy
COPY --chown=brane:brane ./brane-chk/policy /home/brane/policy

# Run the compiler executable as base
USER brane
# NOTE: Working from this dir to make the exposed `POLICY_FILE` env a little sensible
WORKDIR /home/brane/policy
ENTRYPOINT [ "/brane-chk", "--backend-cmd", "/home/brane/eflint-repl" ]
