# DOCKERFILE.dev for BRANE
#   by Tim MÃ¼ller and Onno Valkering
#
# Contains the Dockerfile for the various Brane instance images.
#
# This version builds the development images, which prefer build speed and
# debugging over fast executables by simply copying pre-build executables from
# the project 'target' directory.
# 
# This results in much faster build times when building repeatedly, due to the
# build cache being re-used, and (on virtualized Docker environments) much
# faster disk I/O times.
# 
# For a release version, see Dockerfile.rls.
#


##### BASE IMAGE #####
# This image defines the base image for all Brane service images.
# Note: we don't do 20.04 because the skopeo alternative link has died
# Note: we'd like to go to 22.04, but for now this is in conflict with OpenSSL
FROM ubuntu:22.04 AS brane-base
LABEL org.opencontainers.image.source https://github.com/epi-project/Brane

# Add the log directory
RUN mkdir -p /logs/profile

# Add an ubuntu 21.10 source for libssl1.1 (insecure, but it's the dev image anyway)
RUN echo "deb http://old-releases.ubuntu.com/ubuntu impish-security main" >> /etc/apt/sources.list

# Install libssl (the Rust crate depends on it)
RUN apt-get update && apt-get install -y \
    libssl1.1 \
 && rm -rf /var/lib/apt/lists/*

# If ever run, run a shell
ENTRYPOINT [ "/bin/bash" ]





##### BRANE-PRX #####
# This image contains the Brane proxy service.
FROM brane-base AS brane-prx

# Define the architecture argument
ARG ARCH

# Copy `brane-prx` from build stage
COPY ./.container-bins/$ARCH/brane-prx /brane-prx
RUN chmod +x /brane-prx

# Run the compiled executable as base
ENTRYPOINT [ "/brane-prx", "--debug" ]





##### BRANE-API #####
# This image contains the Brane API service.
FROM brane-base AS brane-api

# Define the architecture argument
ARG ARCH

# Install additional runtime dependencies specific for brane-api
RUN apt-get update && apt-get install -y \
    gnupg2 \
    wget \
 && rm -rf /var/lib/apt/lists/*

# Copy `brane-api` from build stage
COPY ./.container-bins/$ARCH/brane-api /brane-api
RUN chmod +x /brane-api

# Run the compiled executable as base
ENTRYPOINT [ "/brane-api", "--debug" ]





##### BRANE-CLB #####
# This image contains the Brane callback service.
FROM brane-base AS brane-clb

# Define the architecture argument
ARG ARCH
 
# Copy `brane-clb` from build stage
COPY ./.container-bins/$ARCH/brane-clb /brane-clb
RUN chmod +x /brane-clb

# Run the compiled executable as base
ENTRYPOINT [ "/brane-clb", "--debug" ]





##### BRANE-DRV #####
# This image contains the Brane driver service.
FROM brane-base AS brane-drv

# Define the architecture argument
ARG ARCH

# Copy `brane-drv` from build stage
COPY ./.container-bins/$ARCH/brane-drv /brane-drv
RUN chmod +x /brane-drv

# Run the compiled executable as base
ENTRYPOINT [ "/brane-drv", "--debug" ]





##### BRANE-PLR #####
# This image contains the Brane planner service.
FROM brane-base AS brane-plr

# Define the architecture argument
ARG ARCH

# Copy `brane-plr` from build stage
COPY ./.container-bins/$ARCH/brane-plr /brane-plr
RUN chmod +x /brane-plr

# Run the compiled executable as base
ENTRYPOINT [ "/brane-plr", "--debug" ]





##### BRANE-JOB #####
# This image contains the Brane job service.
FROM brane-base AS brane-job

# Define the architecture argument
ARG ARCH

# Copy `brane-job` from build stage
COPY ./.container-bins/$ARCH/brane-job /brane-job
RUN chmod +x /brane-job

# Run the compiled executable as base
ENTRYPOINT [ "/brane-job", "--debug" ]





##### BRANE-REG #####
# This image contains the Brane registry service.
FROM brane-base AS brane-reg

# Define the architecture argument
ARG ARCH

# Copy `brane-job` from build stage
COPY ./.container-bins/$ARCH/brane-reg /brane-reg
RUN chmod +x /brane-reg

# Run the compiled executable as base
ENTRYPOINT [ "/brane-reg", "--debug" ]
